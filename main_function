app = Flask(__name__)

# Dictionary to store custom voice profiles
voice_profiles = defaultdict(dict)

# Function to get available voices
def get_available_voices():
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    return [voice.name for voice in voices]

# Function to set custom voice profile
@app.route('/set_voice_profile', methods=['POST'])
def set_voice_profile():
    username = request.form['username']
    voice_name = request.form['voice_name']
    voice_profiles[username]['voice_name'] = voice_name
    return 'Voice profile set successfully'

# Function to generate text-to-speech
@app.route('/generate_speech', methods=['POST'])
def generate_speech():
    username = request.form['username']
    text = request.form['text']
    voice_name = voice_profiles[username].get('voice_name', 'english')

    engine = pyttsx3.init()
    voices = engine.getProperty('voices')
    for voice in voices:
        if voice.name == voice_name:
            engine.setProperty('voice', voice.id)
            break

    engine.save_to_file(text, 'output.mp3')
    engine.runAndWait()
    return send_file('output.mp3', as_attachment=True)

# Function to generate text from YouTube video
@app.route('/generate_text_from_youtube', methods=['POST'])
def generate_text_from_youtube():
    video_url = request.form['video_url']
    video_id = video_url.split('?v=')[1]
    transcript = YouTubeTranscriptApi.get_transcript(video_id)
    text = ' '.join([item['text'] for item in transcript])
    return text

# Function to handle voice commands
def handle_voice_commands():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening for commands...")
        recognizer.adjust_for_ambient_noise(source)
        audio = recognizer.listen(source)

    try:
        command = recognizer.recognize_google(audio).lower()
        return command
    except sr.UnknownValueError:
        return None

# Function to interact with students
def interact_with_student():
    command = handle_voice_commands()
    if command:
        if "read" in command:
            text_to_read = "This is a sample text. Replace it with actual educational content."
            generate_speech(text_to_read)  # Read out the educational content
        elif "explain" in command:
            explanation_text = "This is an example explanation."
            generate_speech(explanation_text)  # Provide an explanation
        elif "quiz" in command:
            quiz_text = "Here's a quiz question: What is the capital of France?"
            generate_speech(quiz_text)  # Present a quiz question
        # Add more commands and corresponding actions as needed

# Main loop for AI tutor
def main():
    while True:
        interact_with_student()

if __name__ == '__main__':
    app.run(debug= True)

# Run AI tutor in a separate thread
import threading
ai_tutor_thread = threading.Thread(target=main)
ai_tutor_thread.start()
